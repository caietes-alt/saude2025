# app.py
import streamlit as st
import pandas as pd
import os, io, re, datetime
import slugify from slugify 
import psycopg2

st.set_page_config(page_title="Processo Seletivo - Sa√∫de", page_icon="ü©∫", layout="centered")
st.title("Formul√°rio de Inscri√ß√£o ‚Äì Processo Seletivo (Sa√∫de) - Munic√≠pio de Ilh√©us")

st.markdown("""
**Instru√ß√µes**¬†¬†
- Preencha **todos** os campos obrigat√≥rios.¬†¬†
- Anexe os **PDFs** solicitados (alguns podem ser um √∫nico PDF consolidado).¬†¬†
- Seus dados ser√£o usados **exclusivamente** neste processo seletivo.
""")

# --------------------------
# Cat√°logos (cargos / locais)
# --------------------------
cargos_superior = [
    "Enfermeiro Generalista","Enfermeiro Emergencista","Enfermeiro Sa√∫de Mental","Psic√≥logo",
    "Biom√©dico (30h)","Biom√©dico (40h)","M√©dico Veterin√°rio","Nutricionista","Assistente Social",
    "Fisioterapeuta","Educador F√≠sico","Pedagogo","Terapeuta Ocupacional","Fonoaudi√≥logo",
    "Farmac√™utico","Engenheiro Civil","Gerente de Unidade"
]
cargos_tecnico = [
    "T√©cnico de Enfermagem","T√©cnico em An√°lise Cl√≠nica","T√©cnico de Sa√∫de Bucal",
    "T√©cnico em Radiologia"
]
cargos_medio = [
    "TARM","Auxiliar Administrativo","Auxiliar Veterin√°rio","Artes√£o Oficineiro",
    "Int√©rprete de Libras","Condutor de Ambul√¢ncia","Condutor de Motol√¢ncia",
    "R√°dio Operador (TARM)","Auxiliar de Farm√°cia","Almoxarife"
]
cargos_fundamental = [
    "Auxiliar de Servi√ßos Gerais","Motorista","Vaqueiro"
]
cargos_all = (["‚Äî Selecione ‚Äî"] + cargos_superior + cargos_tecnico + cargos_medio + cargos_fundamental)

# --------------------------
# Formul√°rio
# --------------------------
with st.form("inscricao_form"):
    st.header("Informa√ß√µes Pessoais")
    nome = st.text_input("Nome completo *")
    data_nasc = st.date_input("Data de nascimento *")
    rg = st.text_input("RG (com √≥rg√£o emissor) *")
    cpf = st.text_input("CPF *")
    endereco = st.text_input("Endere√ßo completo *")
    telefone = st.text_input("Telefone (WhatsApp) *")
    email = st.text_input("E-mail *")

    st.header("Declara√ß√µes (marque se aplic√°vel)")
    pcd = st.radio("Pessoa com defici√™ncia (PCD)? *", ["N√£o","Sim"], horizontal=True)
    indigena = st.radio("Ind√≠gena? *", ["N√£o","Sim"], horizontal=True)

    st.header("Informa√ß√µes sobre o Cargo e Vaga")
    cargo = st.selectbox("Cargo pretendido *", cargos_all, index=0)
    localidade = st.text_input("Unidade/Localidade de interesse (se aplic√°vel)")
    experiencia = st.radio("Possui experi√™ncia na √°rea? *", ["N√£o","Sim"], horizontal=True)

    st.header("Documenta√ß√£o Obrigat√≥ria (PDF)")
    st.caption("Quando indicado ‚Äúem arquivo √∫nico‚Äù, consolide os comprovantes em um √∫nico PDF.")

    doc_rg = st.file_uploader("RG (frente e verso) ‚Äì PDF *", type=["pdf"])
    doc_cpf = st.file_uploader("CPF ‚Äì PDF *", type=["pdf"])
    doc_militar = st.file_uploader("Quita√ß√£o militar (apenas sexo masculino, se aplic√°vel) ‚Äì PDF", type=["pdf"])
    doc_resid = st.file_uploader("Comprovante de resid√™ncia (at√© 3 meses) ‚Äì PDF *", type=["pdf"])
    doc_titulo = st.file_uploader("T√≠tulo de eleitor + quita√ß√£o eleitoral ‚Äì PDF *", type=["pdf"])
    doc_ctps = st.file_uploader("CTPS ‚Äì PDF *", type=["pdf"])
    doc_pis = st.file_uploader("Documento com n¬∫ PIS/PASEP ‚Äì PDF *", type=["pdf"])

    doc_curriculo = st.file_uploader("Curr√≠culo atualizado **comprobat√≥rio** (arquivo √∫nico) ‚Äì PDF *", type=["pdf"])
    doc_escolaridade = st.file_uploader("Escolaridade exigida (m√©dio/t√©cnico/fundamental) (arquivo √∫nico) ‚Äì PDF (se aplic√°vel)", type=["pdf"])
    doc_diploma_sup = st.file_uploader("Diploma/Certificado de Curso Superior ‚Äì PDF (se aplic√°vel)", type=["pdf"])
    doc_pos = st.file_uploader("P√≥s-gradua√ß√£o na √°rea (se houver) ‚Äì PDF", type=["pdf"])
    doc_exper = st.file_uploader("Comprova√ß√£o de tempo de experi√™ncia ‚Äì PDF", type=["pdf"])

    doc_laudo_pcd = None
    if pcd == "Sim":
        doc_laudo_pcd = st.file_uploader("Laudo m√©dico (CID-10), emitido nos √∫ltimos 6 meses ‚Äì PDF *", type=["pdf"])

    doc_funai = None
    if indigena == "Sim":
        doc_funai = st.file_uploader("Declara√ß√£o da FUNAI e/ou do Cacique do povo ‚Äì PDF *", type=["pdf"])

    doc_antecedentes = st.file_uploader("Atestados de Antecedentes Criminais (TJ Estadual/Federal) e SSP/BA ‚Äì PDF *", type=["pdf"])

    st.header("Termos")
    declara = st.checkbox("Declaro que as informa√ß√µes s√£o verdadeiras. *")
    autoriza = st.checkbox("Autorizo o uso dos dados pessoais neste processo seletivo. *")

    enviado = st.form_submit_button("Enviar inscri√ß√£o")

# --------------------------
# Valida√ß√£o e salvamento
# --------------------------
def apenas_digitos(s):
    return re.sub(r"\D", "", s or "")

def validar_pdf_up(file, obrigatorio=False):
    if obrigatorio and file is None:
        return False, "Documento obrigat√≥rio ausente."
    if file is not None and file.type != "application/pdf":
        return False, "Arquivo deve ser PDF."
    return True, None

# Fun√ß√£o para conectar e criar a tabela no banco de dados
def conectar_db_e_criar_tabela():
    try:
        conn = psycopg2.connect(**st.secrets["postgres"])
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS inscricoes (
                id SERIAL PRIMARY KEY,
                timestamp TIMESTAMP,
                nome VARCHAR(255),
                data_nascimento DATE,
                rg VARCHAR(255),
                cpf VARCHAR(11) UNIQUE,
                endereco TEXT,
                telefone VARCHAR(255),
                email VARCHAR(255),
                pcd VARCHAR(5),
                indigena VARCHAR(5),
                cargo VARCHAR(255),
                localidade VARCHAR(255),
                experiencia VARCHAR(5),
                declara BOOLEAN,
                autoriza BOOLEAN
            );
        """)
        conn.commit()
        return conn
    except Exception as e:
        st.error(f"Erro ao conectar ou criar a tabela no banco de dados: {e}")
        return None

if enviado:
    erros = []

    # Campos
    cpf_limpo = apenas_digitos(cpf)
    
    obrigatorios = {
        "Nome completo": bool(nome.strip()),
        "CPF": bool(cpf_limpo) and len(cpf_limpo) == 11,
        "RG": bool(rg.strip()),
        "Endere√ßo": bool(endereco.strip()),
        "Telefone": bool(telefone.strip()),
        "E-mail": bool(email.strip()),
        "Cargo": (cargo != "‚Äî Selecione ‚Äî"),
        "Declara√ß√£o de veracidade": declara,
        "Autoriza√ß√£o de uso dos dados": autoriza
    }
    for k,v in obrigatorios.items():
        if not v: erros.append(f"{k} √© obrigat√≥rio.")

    # Docs obrigat√≥rios
    checks = [
        validar_pdf_up(doc_rg, True),
        validar_pdf_up(doc_cpf, True),
        validar_pdf_up(doc_resid, True),
        validar_pdf_up(doc_titulo, True),
        validar_pdf_up(doc_ctps, True),
        validar_pdf_up(doc_pis, True),
        validar_pdf_up(doc_curriculo, True),
        validar_pdf_up(doc_antecedentes, True),
    ]
    for ok,msg in checks:
        if not ok: erros.append(msg)
    
    # Docs condicionados ao cargo
    if cargo in cargos_superior:
        ok, msg = validar_pdf_up(doc_diploma_sup, True)
        if not ok: erros.append("Diploma/Certificado de Curso Superior √© obrigat√≥rio para cargos de n√≠vel superior.")
    
    elif cargo in cargos_tecnico or cargo in cargos_medio or cargo in cargos_fundamental:
        ok, msg = validar_pdf_up(doc_escolaridade, True)
        if not ok: erros.append("Escolaridade exigida √© obrigat√≥ria para este cargo.")

    # Docs condicionados a declara√ß√µes
    if pcd == "Sim":
        ok,msg = validar_pdf_up(doc_laudo_pcd, True)
        if not ok: erros.append("Laudo PCD obrigat√≥rio.")

    if indigena == "Sim":
        ok,msg = validar_pdf_up(doc_funai, True)
        if not ok: erros.append("Declara√ß√£o FUNAI/Cacique obrigat√≥ria.")

    if erros:
        st.error("‚ö†Ô∏è Corrija os itens abaixo antes de enviar:")
        for e in sorted(set(erros)):
            st.write("-", e)
    else:
        # Tenta salvar no banco de dados
        try:
            conn = conectar_db_e_criar_tabela()
            if conn:
                cursor = conn.cursor()
                # Insere dados na tabela
                sql = """
                    INSERT INTO inscricoes (
                        timestamp, nome, data_nascimento, rg, cpf, endereco, telefone, email,
                        pcd, indigena, cargo, localidade, experiencia, declara, autoriza
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
                """
                dados_inscricao = (
                    datetime.datetime.now(), nome, data_nasc, rg, cpf_limpo, endereco, telefone, email,
                    pcd, indigena, cargo, localidade, experiencia, declara, autoriza
                )
                cursor.execute(sql, dados_inscricao)
                conn.commit()
                st.success("‚úÖ Dados salvos com sucesso no banco de dados!")
                cursor.close()
                conn.close()

        except psycopg2.errors.UniqueViolation:
            st.error("‚ö†Ô∏è Erro: J√° existe uma inscri√ß√£o com este CPF. Por favor, verifique os dados.")
            conn.rollback() # Desfaz a transa√ß√£o em caso de erro
        except Exception as e:
            st.error(f"‚ö†Ô∏è Erro ao salvar os dados no banco: {e}")

        # Salva arquivos localmente (como no c√≥digo original)
        cpf_key = apenas_digitos(cpf)
        base_dir = os.path.join("inscricoes", cpf_key)
        os.makedirs(base_dir, exist_ok=True)

        def salvar(pdf, nome_arquivo):
            if pdf is None: return None
            path = os.path.join(base_dir, nome_arquivo)
            with open(path, "wb") as f: f.write(pdf.getbuffer())
            return path

        saved = {
            "rg": salvar(doc_rg, "RG.pdf"),
            "cpf": salvar(doc_cpf, "CPF.pdf"),
            "resid": salvar(doc_resid, "Comprovante_Residencia.pdf"),
            "titulo": salvar(doc_titulo, "Titulo_Eleitor_Quitacao.pdf"),
            "ctps": salvar(doc_ctps, "CTPS.pdf"),
            "pis": salvar(doc_pis, "PIS_PASEP.pdf"),
            "curriculo": salvar(doc_curriculo, "Curriculo_Comprovado.pdf"),
            "escolaridade": salvar(doc_escolaridade, "Escolaridade.pdf") if doc_escolaridade else None,
            "diploma_sup": salvar(doc_diploma_sup, "Diploma_Superior.pdf") if doc_diploma_sup else None,
            "pos": salvar(doc_pos, "Pos_Graduacao.pdf") if doc_pos else None,
            "exper": salvar(doc_exper, "Experiencia.pdf") if doc_exper else None,
            "militar": salvar(doc_militar, "Quitacao_Militar.pdf") if doc_militar else None,
            "laudo_pcd": salvar(doc_laudo_pcd, "Laudo_PCD.pdf") if doc_laudo_pcd else None,
            "funai": salvar(doc_funai, "Declaracao_FUNAI_Cacique.pdf") if doc_funai else None,
            "antecedentes": salvar(doc_antecedentes, "Antecedentes_Criminais.pdf"),
        }
        
        protocolo = f"ILH-Saude-{cpf_key}-{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
        st.success("‚úÖ Inscri√ß√£o enviada com sucesso!")
        st.info(f"Protocolo: **{protocolo}**")
        st.write("Guarde seu protocolo. Voc√™ receber√° comunica√ß√µes pelo e-mail/telefone informados.")

